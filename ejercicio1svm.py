# -*- coding: utf-8 -*-
"""ejercicio1SVM.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1BGFKvdvGAlCQo-CgGeuTgDoPBwwvsqsx
"""

########## LIBRERÍAS A UTILIZAR ##########
#Se importan la librerias a utilizar
from sklearn import datasets
import numpy as np
import pandas as pd
import seaborn as sns

#Importamos los datos de la misma librería de scikit-learn
dataset = datasets.load_breast_cancer()
print(dataset)

########## ENTENDIMIENTO DE LA DATA ##########
#información contenida en el dataset
print('Información en el dataset:')
print(dataset.keys())
print()

dataset.data.shape

#características del dataset
print('Características del dataset:')
print(dataset.DESCR)

#Seleccionamos todas las columnas
X = dataset.data

#Defino los datos correspondientes a las etiquetas
y = dataset.target

########## IMPLEMENTACIÓN DE MAQUINAS VECTORES DE SOPORTE ##########
from sklearn.model_selection import train_test_split

#Separo los datos de "train" en entrenamiento y prueba para probar los algoritmos
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2)

#Defino el algoritmo a utilizar
from sklearn import svm

#Crear un clasificador svm
clf = svm.SVC(kernel='linear') # Linear Kernel

#Entrena al modelo usando los conjuntos de entrenamiento
clf.fit(X_train, y_train)

#Predecir la respuesta para el conjunto de datos de prueba
y_pred = clf.predict(X_test)

#Importe el módulo de métricas scikit-learn para calcular la precisión
from sklearn.metrics import classification_report, confusion_matrix

# Precisión del modelo: ¿con qué frecuencia es correcto el clasificador?
print("Exactitud:",metrics.accuracy_score(y_test, y_pred))

# Precisión del modelo: ¿qué porcentaje de tuplas positivas se etiquetan como tales?

print("Presicion:",metrics.precision_score(y_test, y_pred))

#Verifico la matriz de Confusión
from sklearn.metrics import confusion_matrix

matriz = confusion_matrix(y_test, y_pred, labels=[1,0])
print('Matriz de Confusión:')
print(matriz)

cm= np.array(confusion_matrix(y_test, y_pred, labels=[1,0]))
confucion= pd.DataFrame(cm, index=['es cancer', 'esta saludable'],
                       columns=['prediccion cancer', 'prediccion saludable'])
confucion

sns.heatmap(confucion, annot=True)